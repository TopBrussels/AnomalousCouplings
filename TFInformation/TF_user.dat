<file>## ##################################################################
##                                          ##
##                          Matrix Element                               ##
##                          ==============                               ##
##                                                                       ##
##		    Generate the transfer functions                         ##
##	             -------------------------------                        ##
## 	     			                                            ##
##				                                            ##
##    Author: Annik Olbrechts (VUB)                                      ##
##   			                                            ##
##    Version:     1.0.0                         		            ##
##    Last change: 27/11/14			                            ##
##					                                    ##
###########################################################################
###########################################################################
##				                                            ##
##    Instructions:			                                    ##
##								            ##
##	- This program  creates transfer functions in THETA/PHI/E           ##
##	- Those functions must be defined in f77 standard                   ##
##	- In addition to each transfer function(START_TF), you MUST give    ##
##	   the typical width associated to your function (START_WIDTH)	    ##
##      - If a transfer functions is not defined here it will by default ##
##          - equals to one for neutrino/neutralino                      ##
##          - a delta functions for the rest                             ##
###########################################################################
##                                                                       ##
##   Syntax/variables:                                                   ## 
##                                                                       ##
##  - a definition for transfer functions should define the variable tf  ##
##    while a definition for the width shoud define the variable width   ## 
##	- You can use all standard f77 functions. (All variables are	    ##
##		in double precision format). 	                            ##
##	- The experimental event is  defined by the variable pexp(i)        ##
##		i=0->3 (0->E,1->Px,2->Py,3->Pz)	                            ##
##	- The partonic event is defined by the variable p(i)   	            ##
##		i=0->3 (0->E,1->Px,2->Py,3->Pz)			            ##
##		sigma can not depend on those variables		            ##
##	- You can use 10 local variables			            ##
##		(double precision):  prov1,prov2,...,prov10	            ##
##	- You can call specific functions on p or pexp:	                    ##
##		-pt(p)   : transverse momenta 			            ##
##		-eta(p)  : pseudo-rapidity			            ##
##		-rap(p)  : rapidity					    ##
##		-theta(p): polar angle				            ##
##		-phi(p)	 : azimuthal angle		  	     	    ##
##	- The whole LHCO information is available.                          ##
##              -run_number,trigger                       	 	    ##
##		-eta_init(N),phi_init(N),pt_init(N)                         ##
##              -j_mass(N),ntrk(N),btag(N),had_em(N)     	            ##
##		-dummy1(N),dummy2(N)		                            ##
##	    N is the LHCO tag(first column)	                            ##
##		- current tag is n_lhco  				    ##
##		- tag for missing ET is met_lhco			    ##
##				  					    ##
##	- You can incorporate parameters that will be passed through        ##
##	        the transfert_card.dat. Those ones must have the            ##
##		following syntax: #1,#2,#3,.. You can restart 		    ##
##		the assignement for each different transfer function	    ##
##	- In addition to each transfer function(tf_), you MUST give	    ##
##		the typical width associated to your function (sigma_)	    ##
##		This is needed for the phase space generator      	    ##
##									    ##
###########################################################################
###########################################################################

##**********************************************************************##
##             TF for bjet                                      
##**********************************************************************##
<block name='bjet'>   #name can be anything
  <info> double gaussian with parameter depending on the energy </info>
  <particles> b </particles>
  <width_type> thin </width_type>
  #width type should be thin or large (thin is for energy accurate up to 5-10%)
  <variable name='E'>
    <tf>
        prov1=(#1+#2*p(0)+#3*p(0)**2+#4*p(0)**3+#5*p(0)**4)
        IF( p(0) .LE. 46.6667) THEN 
          prov1=0.723354
        ENDIF 

        IF( p(0) .GE. 235.556) THEN 
          prov1 = -0.719046
       ENDIF 

        prov2=(#6+#7*dsqrt(p(0))+#8*p(0))
        IF( p(0) .LE. 46.6667) THEN 
          prov2=7.45523
        ENDIF 

        IF( p(0) .GE. 235.556) THEN 
          prov2 = 18.1598
       ENDIF 

        prov3=(#9+#10*p(0)+#11*p(0)**2+#12*p(0)**3+#13*p(0)**4)
        IF( p(0) .LE. 46.6667) THEN 
          prov3=0.124422
        ENDIF 

        IF( p(0) .GE. 235.556) THEN 
          prov3 = 0.67119
       ENDIF 

        prov4=(#14+#15*p(0)+#16*p(0)**2+#17*p(0)**3+#18*p(0)**4)
        IF( p(0) .LE. 68.8889) THEN 
          prov4=132.869
        ENDIF 

        IF( p(0) .GE. 235.556) THEN 
          prov4 = 71.4781
       ENDIF 

        prov5=(#19+#20*dsqrt(p(0))+#21*p(0))
        IF( p(0) .LE. 68.8889) THEN 
          prov5=91.3919
        ENDIF 

        IF( p(0) .GE. 235.556) THEN 
          prov5 = 76.1959
       ENDIF 


        tf=(exp(-(p(0)-pexp(0)-prov1)**2/2d0/prov2**2))          !first gaussian
        tf=tf+prov3*(exp(-(p(0)-pexp(0)-prov4)**2/2d0/prov5**2)) !second gaussian
        tf=tf*((1d0/dsqrt(2d0*pi))/(dsqrt(prov2*prov2)+prov3*dsqrt(prov5*prov5)))            !normalisation
    </tf> 
    <width>
        prov2=(#6+#7*dsqrt(pexp(0))+#8*pexp(0))
        prov5=(#19+#20*dsqrt(pexp(0))+#21*pexp(0))
 
        width = max(prov2, prov5) 
    </width> 
  </variable>
</block>
##**********************************************************************##
##             TF for electron                                      
##**********************************************************************##
<block name='electron'>   #name can be anything
  <info> double gaussian with parameter depending on the energy </info>
  <particles> el </particles>
  <width_type> thin </width_type>
  #width type should be thin or large (thin is for energy accurate up to 5-10%)
  <variable name='E'>
    <tf>
        prov1=(#1+#2*p(0)+#3*p(0)**2+#4*p(0)**3+#5*p(0)**4)
        IF( p(0) .LE. 41.4) THEN 
          prov1=32.5346
        ENDIF 

        IF( p(0) .GE. 182) THEN 
          prov1 = 46.7984
       ENDIF 

        prov2=(#6+#7*dsqrt(p(0))+#8*p(0))
        IF( p(0) .LE. 41.4) THEN 
          prov2=-14.0403
        ENDIF 

        IF( p(0) .GE. 182) THEN 
          prov2 = -34.0929
       ENDIF 

        prov3=(#9+#10*p(0)+#11*p(0)**2+#12*p(0)**3+#13*p(0)**4)
        IF( p(0) .LE. 41.4) THEN 
          prov3=1.99147
        ENDIF 

        IF( p(0) .GE. 182) THEN 
          prov3 = 1.12398
       ENDIF 

        prov4=(#14+#15*p(0)+#16*p(0)**2+#17*p(0)**3+#18*p(0)**4)
        IF( p(0) .LE. 33.8) THEN 
          prov4=-0.269237
        ENDIF 

        IF( p(0) .GE. 182) THEN 
          prov4 = 0.353716
       ENDIF 

        prov5=(#19+#20*dsqrt(p(0))+#21*p(0))
        IF( p(0) .LE. 33.8) THEN 
          prov5=0.736461
        ENDIF 

        IF( p(0) .GE. 182) THEN 
          prov5 = 2.31736
       ENDIF 


        tf=(exp(-(p(0)-pexp(0)-prov1)**2/2d0/prov2**2))          !first gaussian
        tf=tf+prov3*(exp(-(p(0)-pexp(0)-prov4)**2/2d0/prov5**2)) !second gaussian
        tf=tf*((1d0/dsqrt(2d0*pi))/(dsqrt(prov2*prov2)+prov3*dsqrt(prov5*prov5)))            !normalisation
    </tf> 
    <width>
        prov2=(#6+#7*dsqrt(pexp(0))+#8*pexp(0))
        prov5=(#19+#20*dsqrt(pexp(0))+#21*pexp(0))
 
        width = max(prov2, prov5) 
    </width> 
  </variable>
</block>
##**********************************************************************##
##             TF for nonbjet                                      
##**********************************************************************##
<block name='nonbjet'>   #name can be anything
  <info> double gaussian with parameter depending on the energy </info>
  <particles> u,d,s,c,g </particles>
  <width_type> thin </width_type>
  #width type should be thin or large (thin is for energy accurate up to 5-10%)
  <variable name='E'>
    <tf>
        prov1=(#1+#2*p(0)+#3*p(0)**2+#4*p(0)**3+#5*p(0)**4)
        IF( p(0) .LE. 33.4375) THEN 
          prov1=-3.97771
        ENDIF 

        IF( p(0) .GE. 151.562) THEN 
          prov1 = -2.75746
       ENDIF 

        prov2=(#6+#7*dsqrt(p(0))+#8*p(0))
        IF( p(0) .LE. 33.4375) THEN 
          prov2=-5.40026
        ENDIF 

        IF( p(0) .GE. 151.562) THEN 
          prov2 = -18.3852
       ENDIF 

        prov3=(#9+#10*p(0)+#11*p(0)**2+#12*p(0)**3+#13*p(0)**4)
        IF( p(0) .LE. 33.4375) THEN 
          prov3=0.218029
        ENDIF 

        IF( p(0) .GE. 151.562) THEN 
          prov3 = 0.139683
       ENDIF 

        prov4=(#14+#15*p(0)+#16*p(0)**2+#17*p(0)**3+#18*p(0)**4)
        IF( p(0) .LE. 46.0938) THEN 
          prov4=-42.3556
        ENDIF 

        IF( p(0) .GE. 151.562) THEN 
          prov4 = 1.59918
       ENDIF 

        prov5=(#19+#20*dsqrt(p(0))+#21*p(0))
        IF( p(0) .LE. 46.0938) THEN 
          prov5=-20.9231
        ENDIF 

        IF( p(0) .GE. 151.562) THEN 
          prov5 = -67.0021
       ENDIF 


        tf=(exp(-(p(0)-pexp(0)-prov1)**2/2d0/prov2**2))          !first gaussian
        tf=tf+prov3*(exp(-(p(0)-pexp(0)-prov4)**2/2d0/prov5**2)) !second gaussian
        tf=tf*((1d0/dsqrt(2d0*pi))/(dsqrt(prov2*prov2)+prov3*dsqrt(prov5*prov5)))            !normalisation
    </tf> 
    <width>
        prov2=(#6+#7*dsqrt(pexp(0))+#8*pexp(0))
        prov5=(#19+#20*dsqrt(pexp(0))+#21*pexp(0))
 
        width = max(prov2, prov5) 
    </width> 
  </variable>
</block>
##**********************************************************************##
##             TF for muon                                      
##**********************************************************************##
<block name='muon'>   #name can be anything
  <info> double gaussian with parameter depending on the energy </info>
  <particles> mu </particles>
  <width_type> thin </width_type>
  #width type should be thin or large (thin is for energy accurate up to 5-10%)
  <variable name='E'>
    <tf>
        prov1=(#1+#2*p(0)+#3*p(0)**2+#4*p(0)**3+#5*p(0)**4)
        IF( p(0) .LE. 25) THEN 
          prov1=23.4592
        ENDIF 

        IF( p(0) .GE. 165) THEN 
          prov1 = 48.982
       ENDIF 

        prov2=(#6+#7*dsqrt(p(0))+#8*p(0))
        IF( p(0) .LE. 25) THEN 
          prov2=-1.10451
        ENDIF 

        IF( p(0) .GE. 165) THEN 
          prov2 = -15.2469
       ENDIF 

        prov3=(#9+#10*p(0)+#11*p(0)**2+#12*p(0)**3+#13*p(0)**4)
        IF( p(0) .LE. 25) THEN 
          prov3=2.23782
        ENDIF 

        IF( p(0) .GE. 165) THEN 
          prov3 = 0.206801
       ENDIF 

        prov4=(#14+#15*p(0)+#16*p(0)**2+#17*p(0)**3+#18*p(0)**4)
        IF( p(0) .LE. 25) THEN 
          prov4=0.0141653
        ENDIF 

        IF( p(0) .GE. 165) THEN 
          prov4 = 1.92678
       ENDIF 

        prov5=(#19+#20*dsqrt(p(0))+#21*p(0))
        IF( p(0) .LE. 25) THEN 
          prov5=0.32752
        ENDIF 

        IF( p(0) .GE. 165) THEN 
          prov5 = 4.02352
       ENDIF 


        tf=(exp(-(p(0)-pexp(0)-prov1)**2/2d0/prov2**2))          !first gaussian
        tf=tf+prov3*(exp(-(p(0)-pexp(0)-prov4)**2/2d0/prov5**2)) !second gaussian
        tf=tf*((1d0/dsqrt(2d0*pi))/(dsqrt(prov2*prov2)+prov3*dsqrt(prov5*prov5)))            !normalisation
    </tf> 
    <width>
        prov2=(#6+#7*dsqrt(pexp(0))+#8*pexp(0))
        prov5=(#19+#20*dsqrt(pexp(0))+#21*pexp(0))
 
        width = max(prov2, prov5) 
    </width> 
  </variable>
</block>
</file>