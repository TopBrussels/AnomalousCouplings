<file>## ##################################################################
##                                                                       ##
##                          Matrix Element                               ##
##                          ==============                               ##
##                                                                       ##
##		    Generate the transfer functions                         ##
##	             -------------------------------                        ##
## 	     			                                            ##
##				                                            ##
##    Author: Annik Olbrechts (VUB)                                      ##
##   			                                            ##
##    Version:     1.0.0                         		            ##
##    Last change: 02/02/15			                            ##
##					                                    ##
###########################################################################
###########################################################################
##				                                            ##
##    Instructions:			                                    ##
##								            ##
##	- This program  creates transfer functions in THETA/PHI/E           ##
##	- Those functions must be defined in f77 standard                   ##
##	- In addition to each transfer function(START_TF), you MUST give    ##
##	   the typical width associated to your function (START_WIDTH)	    ##
##      - If a transfer functions is not defined here it will by default ##
##          - equals to one for neutrino/neutralino                      ##
##          - a delta functions for the rest                             ##
###########################################################################
##                                                                       ##
##   Syntax/variables:                                                   ## 
##                                                                       ##
##  - a definition for transfer functions should define the variable tf  ##
##    while a definition for the width shoud define the variable width   ## 
##	- You can use all standard f77 functions. (All variables are	    ##
##		in double precision format). 	                            ##
##	- The experimental event is  defined by the variable pexp(i)        ##
##		i=0->3 (0->E,1->Px,2->Py,3->Pz)	                            ##
##	- The partonic event is defined by the variable p(i)   	            ##
##		i=0->3 (0->E,1->Px,2->Py,3->Pz)			            ##
##		sigma can not depend on those variables		            ##
##	- You can use 10 local variables			            ##
##		(double precision):  prov1,prov2,...,prov10	            ##
##	- You can call specific functions on p or pexp:	                    ##
##		-pt(p)   : transverse momenta 			            ##
##		-eta(p)  : pseudo-rapidity			            ##
##		-rap(p)  : rapidity					    ##
##		-theta(p): polar angle				            ##
##		-phi(p)	 : azimuthal angle		  	     	    ##
##	- The whole LHCO information is available.                          ##
##              -run_number,trigger                       	 	    ##
##		-eta_init(N),phi_init(N),pt_init(N)                         ##
##              -j_mass(N),ntrk(N),btag(N),had_em(N)     	            ##
##		-dummy1(N),dummy2(N)		                            ##
##	    N is the LHCO tag(first column)	                            ##
##		- current tag is n_lhco  				    ##
##		- tag for missing ET is met_lhco			    ##
##				  					    ##
##	- You can incorporate parameters that will be passed through        ##
##	        the transfert_card.dat. Those ones must have the            ##
##		following syntax: #1,#2,#3,.. You can restart 		    ##
##		the assignement for each different transfer function	    ##
##	- In addition to each transfer function(tf_), you MUST give	    ##
##		the typical width associated to your function (sigma_)	    ##
##		This is needed for the phase space generator      	    ##
##									    ##
###########################################################################
###########################################################################

##**********************************************************************##
##             TF for bjet                                      
##**********************************************************************##
<block name='bjet'>   #name can be anything
  <info> double gaussian with parameter depending on the energy </info>
  <particles> b </particles>
  <width_type> thin </width_type>
  #width type should be thin or large (thin is for energy accurate up to 5-10%)
  <variable name='E'>
    <tf>
        IF( p(0) .LE. 46.6667) THEN 
          prov1 = 1.29721
          prov2 = 7.17561
          prov3 = 0.116505
          prov4 = -2.49195
          prov5 = 12.7281
        ELIF( p(0) .GE. 230) THEN 
          prov1 = -0.618212
          prov2 = 19.9502
          prov3 = 0.883837
          prov4 = 16.9089
          prov5 = 47.5426
        ELSE  
          prov1=(#1+#2*dsqrt(p(0))+#3*p(0))
          prov2=(#4+#5*dsqrt(p(0))+#6*p(0))
          prov3=(#7+#8*p(0)+#9*p(0)**2+#10*p(0)**3+#11*p(0)**4+#12*p(0)**5))
          prov4=(#13+#14*dsqrt(p(0))+#15*p(0))
          prov5=(#16+#17*dsqrt(p(0))+#18*p(0))
        ENDIF 

        tf=(exp(-(p(0)-pexp(0)-prov1)**2/2d0/prov2**2))                  !first gaussian
        tf=tf+prov3*(exp(-(p(0)-pexp(0)-prov4)**2/2d0/prov5**2))         !second gaussian
        tf=tf*((1d0/dsqrt(2d0*pi))/(dsqrt(prov2*prov2)+prov3*dsqrt(prov5*prov5)))   !normalisation
    </tf> 
    <width>
        prov2=(#4+#5*dsqrt(pexp(0))+#6*pexp(0))
        prov5=(#16+#17*dsqrt(pexp(0))+#18*pexp(0))
 
        width = max(prov2, prov5) 
    </width> 
  </variable>
</block>
##**********************************************************************##
##             TF for nonbjet                                      
##**********************************************************************##
<block name='nonbjet'>   #name can be anything
  <info> double gaussian with parameter depending on the energy </info>
  <particles> u,d,s,c,g </particles>
  <width_type> thin </width_type>
  #width type should be thin or large (thin is for energy accurate up to 5-10%)
  <variable name='E'>
    <tf>
        IF( p(0) .LE. 33.4375) THEN 
          prov1 = -3.62535
          prov2 = 5.20845
          prov3 = 0.152154
          prov4 = -13.8137
          prov5 = 10.1616
        ELIF( p(0) .GE. 164.219) THEN 
          prov1 = -3.46876
          prov2 = 20.0735
          prov3 = 0.850542
          prov4 = -2.21242
          prov5 = 37.0505
        ELSE  
          prov1=(#1+#2*dsqrt(p(0))+#3*p(0))
          prov2=(#4+#5*dsqrt(p(0))+#6*p(0))
          prov3=(#7+#8*p(0)+#9*p(0)**2+#10*p(0)**3
          prov4=(#11+#12*dsqrt(p(0))+#13*p(0))
          prov5=(#14+#15*dsqrt(p(0))+#16*p(0))
        ENDIF 

        tf=(exp(-(p(0)-pexp(0)-prov1)**2/2d0/prov2**2))                  !first gaussian
        tf=tf+prov3*(exp(-(p(0)-pexp(0)-prov4)**2/2d0/prov5**2))         !second gaussian
        tf=tf*((1d0/dsqrt(2d0*pi))/(dsqrt(prov2*prov2)+prov3*dsqrt(prov5*prov5)))   !normalisation
    </tf> 
    <width>
        prov2=(#4+#5*dsqrt(pexp(0))+#6*pexp(0))
        prov5=(#14+#15*dsqrt(pexp(0))+#16*pexp(0))
 
        width = max(prov2, prov5) 
    </width> 
  </variable>
</block>
</file>
