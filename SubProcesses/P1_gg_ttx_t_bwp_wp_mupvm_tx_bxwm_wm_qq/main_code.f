C+-----------------------------------------------------------------------+
C|                         MAIN CODE FOR MADWEIGHT                       |
C|                                                                       |
C|     Author: Pierre Artoisenet (UCL-CP3)                               |
C|             Olivier Mattelaer (UCL-CP3)                               |
C+-----------------------------------------------------------------------+
C|     This file is generated automaticly by MADWEIGHT-ANALYZER          |
C+-----------------------------------------------------------------------+     
      subroutine main_code(x,n_var)
C+-----------------------------------------------------------------------+
C|     Central Routine for the change of variable choice                 |
C|       - num_sol: number of the solution to charge                     |
C|       - x      : random number from vegas                             |
C+-----------------------------------------------------------------------+
	implicit none
	
	double precision x(20)
	integer n_var
	double precision    S,X1,X2,PSWGT,JAC
        common /PHASESPACE/ S,X1,X2,PSWGT,JAC
c
	double precision multi_channel_weight
	external multi_channel_weight
c
	include 'd_choices.inc'
	include 'phasespace.inc'
	include 'data.inc'
C+-----------------------------------------------------------------------+
C|     Scedullar Part					                 |
C+-----------------------------------------------------------------------+    

       if (config_pos.eq.1) then 

C+-----------------------------------------------------------------------+
C|                                                                       |
C|        ** Enlarged Contraint Sector global information **             |
C|                                                                       |
C|    Class: B                                                           |
C|    particle in ECS : 5(missing)    4(visible)                         |
C|    blob linked are generated by :-2                                   |
C|                                                                       |
C|                                                                       |
C+-----------------------------------------------------------------------+



        call block_d(x,first_d_7_8, second_d_7_8,-1)
        if (jac.le.0d0) return
C       ++++++++++++           
        call block_d(x,6, -1, -2)
        if (jac.le.0d0) return
        call class_b(x,5,4,-3)
        if (jac.le.0d0) return
        call fuse(-3,3,-4)

        jac=jac*multi_channel_weight(1)

       elseif (config_pos.eq.2) then 
C+-----------------------------------------------------------------------+
C|                                                                       |
C|        ** Enlarged Contraint Sector global information **             |
C|                                                                       |
C|    Class: B                                                           |
C|    particle in ECS : 5(missing)    a(fuse)                            |
C|    blob linked are generated by :-2                                   |
C|                                                                       |
C|                                                                       |
C+-----------------------------------------------------------------------+




        call block_d(x,first_d_7_8, second_d_7_8,-1)
        if (jac.le.0d0) return
C       ++++++++++++           
        call block_d(x,6, -1, -2)
        if (jac.le.0d0) return
        call fuse(4,3,9)
       
        call class_b(x,5,9,-4)
        if (jac.le.0d0) return
        call fuse(5,4,-3)

        jac=jac*multi_channel_weight(2)

        endif
        return
        end

C*********************************************************************
        double precision function fct(x,wgt)
        implicit none

        include 'phasespace.inc'
        include 'nexternal.inc'
        include 'run.inc'
        include 'coupl.inc'
        include 'madweight_param.inc'
        integer curr_tf
        common/transfer_fct_curr_tf/curr_tf

c
c       this is the function which is called by the integrator

c
c       parameter
c
        double precision pi
        parameter (pi=3.141592653589793d0)
c
c       arguments
c
        double precision x(20),wgt
c
c       local
c
c        integer i,j ! debug mode
        double precision twgt
        integer new_perm
c
c       global
c
        double precision              S,X1,X2,PSWGT,JAC
        common /PHASESPACE/ S,X1,X2,PSWGT,JAC
        double precision momenta(0:3,-max_branches:2*max_particles) 
     & ! momenta of external/intermediate legs     (MG order)
        double precision mvir2(-max_branches:2*max_particles) 
     &       ! squared invariant masses of intermediate particles (MG order)
        common /to_diagram_kin/ momenta, mvir2

        include 'permutation.inc'

        DOUBLE PRECISION Xl(20),XU(20),ACC
        INTEGER NDIM,NCALL,ITMX,NPRN
        COMMON/BVEG1/XL,XU,ACC, NDIM,NCALL,ITMX,NPRN
        integer perm_id(nexternal-2) !permutation of 1,2,...,nexternal-2
C
C     Keep track of whether cuts already calculated for this event 
C     
      LOGICAL CUTSDONE,CUTSPASSED
      COMMON/TO_CUTSDONE/CUTSDONE,CUTSPASSED
c
c       external
c
        double precision dsig
        external dsig
        double precision fct_before_tf, fct2
        double precision alphas
        external alphas
        logical passcuts
        external passcuts
        include 'data.inc'

c       choose the permutation (point by point in the ps)
        curr_tf = 1

        new_perm = perm_order(min_perm(config_pos) +
     & int(((NPERM - min_perm(config_pos) +1) * x(NDIM))), config_pos)
        if (new_perm.ne.curr_perm) then
           call get_perm(new_perm, perm_id)
           call assign_perm(perm_id)
           curr_perm = new_perm
        endif

        nb_point_by_perm(curr_perm) = nb_point_by_perm(curr_perm) + 1
        call get_PS_point(x)

         if (jac.gt.0d0) then

        if(.not.fixed_ren_scale) then
          call set_ren_scale(momenta(0,1),scale)
          if(scale.gt.0) G = SQRT(4d0*PI*ALPHAS(scale))
          call UPDATE_AS_PARAM()
        endif
        if(.not.fixed_fac_scale) then
          call set_fac_scale(momenta(0,1),q2fact)
        endif


            jac = jac * (NPERM - min_perm(config_pos) +1)/NPERM

           xbk(1)=X1
           xbk(2)=X2
           fct_before_tf=jac*dsig(momenta(0,1),wgt)

           do curr_tf=1,nb_tf
               call transfer_fct(momenta(0,1),TWGT)
               if (curr_tf.eq.1)then
                   fct = fct_before_tf*twgt
                   fct2 = fct
               else
                   fct2 = fct_before_tf*twgt
               endif



        perm_value(curr_perm, curr_tf) = perm_value(curr_perm, curr_tf) + fct2*wgt
        perm_error(curr_perm, curr_tf) = perm_error(curr_perm, curr_tf) + fct**2*wgt**2
        enddo
         else
           fct=0d0
         endif
        curr_tf = 1

         end

